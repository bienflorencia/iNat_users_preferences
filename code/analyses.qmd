---
title: 'Code'
subtitle: 'Beginners and expert citizen scientists prefer similar species on iNaturalist, but experts contribute in average almost hundred times more data'
format: 
  html:
    toc: true
    toc-location: right
    smooth-scroll: true
    html-math-method: katex
    code-fold: true
self-contained: true
editor: source
authors: 
  - 'Rodrigo Montiel'
  - 'Manuele Bazzichetto'
  - 'Florencia Grattarola'
date: '`r format(Sys.time(), "%Y-%m-%d")`'
editor_options: 
  chunk_output_type: console
---

We aim to identify users' recording preferences according to their level of experience on the iNaturalist platform in Uruguay in order to understand the possible biases associated with the data. 

**Workflow**

1) Data download
2) Users' ranking
3) Species traits
4) Statistical analyses

```{r}
#| label: libraries
#| message: false
#| warning: false
#| code-fold: false

library(knitr)
library(tmap)
tmap_mode('view')
library(sf)
sf::sf_use_s2(FALSE)
library(httr)
library(jsonlite)
library(lubridate)
library(tidyverse)
```


## Data download

```{r}
#| label: data-download
#| eval: true
#| message: false
#| warning: false

observations <- read_csv('data/NatUY_observations_03-05.csv',
                         guess_max = 140000)
```

## Users' ranking

First we need to detect those users that are not from Uruguay and remove the data generated by them from our dataset. To do this we created a function using the [iNaturalist API](https://api.inaturalist.org/v1/docs/).  
The function `getObserversNumObservations()` takes a list of users' ids (`user_login_list`) and a location (`place_id`), and retrieves: the `user_id`, `user_login`, and `user_name`, the number of observations and species of the user on iNat and on the location (in our case, Uruguay, `place_id=7259`), and  and the date when the user created their account (`user_created_at`).    

```{r}
#| label: api-function
#| eval: false
#| message: false
#| warning: false


getObserversNumObservations <- function(user_login_list, 
                                        place_id=7259){
  
  observers_num_observations <- tibble(user_id = numeric(), 
                                       observations_iNat = numeric(), 
                                       observations_NatUY = numeric(),
                                       species_iNat = numeric(), 
                                       species_NatUY = numeric(), 
                                       user_login = character(),
                                       user_created_at = lubridate::ymd_hms(), 
                                       user_name = character())
  num_results <- 1
  for (user_login in user_login_list) {
    if ((num_results %% 10) + 10 == 10) { 
      Sys.sleep(10) # The API needs a delay because otherwise it gives an error. 
      # Every 10 users, the code stops for 10 second
    }
    call <- str_glue('https://api.inaturalist.org/v1/observations/observers', 
                     '?user_login={user_login}&',
                     'place_id={place_id}')
    
    get_json_call <- GET(url = call) %>%
      content(as = 'text') %>%
      fromJSON(flatten = TRUE)
    
    if(!'error' %in% names(get_json_call)) {
      results <- as_tibble(get_json_call$results) 
      observer_num_observations <- 
        tibble(user_id = results$user_id,
               observations_iNat = results$user.observations_count,
               observations_NatUY = results$observation_count,
               species_iNat = results$user.species_count,
               species_NatUY = results$species_count,
               user_login = results$user.login,
               user_created_at = results$user.created_at,
               user_name = results$user.name)
      observers_num_observations <- rbind(observers_num_observations,
                                          observer_num_observations)
      cat(num_results, 'user:', user_login, ',',
          observer_num_observations$observations_iNat, 'observations on iNat', '\n')
    }
    else {
      observer_num_observations <- tibble(user_id = NA, 
                                          observations_iNat = NA, 
                                          observations_NatUY = NA,
                                          species_iNat = NA, 
                                          species_NatUY = NA, 
                                          user_login = user_login,
                                          user_created_at = NA, 
                                          user_name = NA)
      observers_num_observations <- rbind(observers_num_observations,
                                          observer_num_observations)
      cat('user:', user_login, '--> NOT FOUND', '\n')
    }
    num_results <- nrow(observers_num_observations) + 1
  }
  return(observers_num_observations)
}

users_dataset <- observations %>% distinct(user_login)

observers_num_observations <- getObserversNumObservations(users_dataset$user_login)

# write_csv(observers_num_observations,
#           'data/observers_num_observations.csv')
```

```{r}
#| label: users
#| echo: false
#| eval: true
#| message: false
#| warning: false

observers_num_observations <- read_csv('data/observers_num_observations.csv')
```

Next, we discard visitors by identifying the Uruguayan users as

```{r}
#| label: filter-uruguayans
#| eval: true
#| message: false
#| warning: false

uruguayans <- observers_num_observations %>%
  mutate(proportion_natuy_inat = round(observations_NatUY*100/observations_iNat, 3),
         uruguayan = ifelse(proportion_natuy_inat>40 , 'yes', 'no')) %>% 
  filter(uruguayan == 'yes')

observations_uy <- filter(observations, user_login %in% uruguayans$user_login)
```

After discarding foreign users, we calculated the number of records uploaded (`observations`), the time active on the platform (taking the dates of the first and last records uploaded, `activity_time`) and the number of records over time (the total number of records uploaded divided by the active time, `observations_by_time`).

With these variables we first categorised users as expert, intermediate or beginner using the following criteria:

- **Expert**: Has 1,000 records or more AND has been active on the platform for more than one year AND has a records/time ratio greater or equal to 0.6. 
- **Intermediate**: Has between 50 and 1,000 records AND has been active on the platform for more than 3 months AND has a records/time ratio greater than 0.2. 
- **Beginner**: Has less than 50 records AND has been active on the platform for less than 3 months  

Finally, we **ranked** the users according to their level of experience in the platform by calculating an index, such that:

$Index = \text{category\_score} \cdot \left( w_1 \cdot \text{observations}_{\text{norm}} + w_2 \cdot \text{activity\_time}_{\text{norm}} + w_3 \cdot \text{observations\_by\_time}_{\text{norm}} \right)$

We gave the same weight to all the variables ($w_1$ = $w_2$ = $w_3$ = `1/3`).  

We used the `category_score` to account for the categories we had previously established, thus, the outcome is a ranking that has experts, intermediates, and beginners sorted within each category.

```{r}
#| label: rank-users
#| eval: true
#| message: false
#| warning: false

normalise <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}

users_dataset <- observations_uy %>% 
    group_by(user_login) %>%
    summarise(
        first_record = min(created_at),
        last_record = max(created_at),
        observations = n(),
        activity_time = as.numeric(difftime(last_record, first_record, units = 'days')) + 1,
        observations_by_time = observations / activity_time
    ) %>%
    filter(observations >= 3 & activity_time > 3) %>%
    mutate(
        user_category = ifelse(
            observations >= 1000 & activity_time >= 365 & observations_by_time >= 0.6, 'expert',
            ifelse(observations >= 50 & activity_time > 90 & observations_by_time > 0.2, 'intermediate', 'beginner')
        ),
        category_score = case_when(
            user_category == 'expert' ~ 10,
            user_category == 'intermediate' ~ 1,
            user_category == 'beginner' ~ 0.01
        )
    ) %>%
    mutate(
        # Normalize variables
        observations_norm = normalise(observations),
        activity_time_norm = normalise(activity_time),
        observations_by_time_norm = normalise(observations_by_time)
    ) %>%
    mutate(
        # Define weights for variables
        w1 = 2/3,  # observations
        w2 = 1/6,  # activity_time
        w3 = 1/6,  # observations_by_time
        # Calculate the index with a category score multiplier
        index = category_score * (
            w1 * observations_norm +
            w2 * activity_time_norm +
            w3 * observations_by_time_norm
        )
    ) %>%
    # Rank users based on the index
    arrange(desc(index)) %>%
    mutate(ranking = row_number())

# write_csv(users_dataset, 'data/users_dataset.csv')
```

```{r}
#| label: summary-tables-users
#| eval: true
#| message: false
#| warning: false
#| code-fold: true
#| tbl-cap: 
#|  - 'Top 5 users per expertise category'
#|  - 'Number and % of users per category'
#|  - 'Number and % of observations per category'

# top 5 users per category
users_dataset %>% 
  group_by(category_score) %>% 
  slice_head(n = 5) %>% ungroup() %>% 
  select(ranking, user_category,user_login, 
         observations, activity_time, observations_by_time) %>% 
  arrange(ranking) %>% 
  rename(Ranking = ranking, 
         Category = user_category, 
         User = user_login,
         `N of observations` = observations,
         `Activity (in days)` = activity_time,
         `N of observations per day` = observations_by_time)  %>% 
  kableExtra::kbl(format.args = list(decimal.mark = '.', 
                                     big.mark = ","),
                  digits=2,
                  booktabs = T) %>% 
  kableExtra::kable_styling(latex_options = c('striped', 'hold_position'))


# users per category
users_dataset %>% 
  group_by(category_score, user_category) %>% 
  count() %>% ungroup() %>% 
  arrange(category_score) %>% select(-category_score) %>%  
  mutate(`%` = scales::label_percent()(n / sum(n))) %>% 
  rename(Category= user_category,
         `N of users`=n)  %>% 
  kableExtra::kbl(format.args = list(decimal.mark = '.', 
                                     big.mark = ","),
                  digits=2,
                  booktabs = T) %>% 
  kableExtra::kable_styling(latex_options = c('striped', 'hold_position'))

# observations per category
left_join(observations_uy, users_dataset %>% 
              select(user_login, observations,category_score, user_category, ranking)) %>% 
    filter(!is.na(user_category)) %>% 
    group_by(category_score, user_category) %>% 
    count() %>% ungroup() %>% 
    arrange(category_score) %>% select(-category_score) %>%  
    mutate(`%` = scales::label_percent()(n / sum(n))) %>% 
    rename(Category= user_category,
           `N of observations`=n)  %>% 
    kableExtra::kbl(format.args = list(decimal.mark = '.', 
                                     big.mark = ","),
                  digits=2,
                  booktabs = T) %>% 
    kableExtra::kable_styling(latex_options = c('striped', 'hold_position'))
```

## Species traits

First, we exported the list of species for tetrapods and plants.

```{r}
#| label: create-species-list
#| eval: false
#| message: false
#| warning: false
#| code-fold: true

species_list <- observations_uy %>% 
  filter(quality_grade == 'research') %>% 
  select(taxon_kingdom_name, taxon_phylum_name, 
         taxon_class_name, taxon_order_name, taxon_family_name,
         taxon_genus_name, taxon_species_name) %>%
  filter(str_count(taxon_species_name, '\\S+') == 2)

# (str_count(scientific_name, '\\S+') ==2) allows us to select 
# those records that have two words in the scientific_name field

## tetrapods
tetra <- species_list %>% 
  filter(taxon_class_name == 'Aves' |
           taxon_class_name == 'Amphibia' |
           taxon_class_name == 'Mammalia' |
           taxon_class_name == 'Reptilia') %>% 
  group_by(taxon_class_name, taxon_species_name) %>% 
  count()

# write_csv(tetra,'data/tetra_list.csv')

## plants
dico <- species_list %>% 
  filter(taxon_family_name == 'Fabaceae' | 
           taxon_family_name == 'Cactaceae' | 
           taxon_family_name == 'Asteraceae'|
           taxon_family_name == 'Solanaceae') %>% 
  group_by(taxon_family_name, taxon_species_name) %>% 
  count()

# write_csv(dico,'data/dico_list.csv')
```

Then, using the list of species, we conducted a literature search, at the national level, to identify the following traits for each species: *geographic distribution*, *conservation status* and *size* or *growth form* depending on whether it was an animal or a plant.

```{r}
#| label: read-species-traits
#| eval: true
#| message: false
#| warning: false

tetra_traits <- read_csv('data/tetra_traits.csv')
dico_traits <- read_csv('data/dico_traits.csv')
```

We identified 33 tetrapod species and 52 plant species listed as non-native or domestic/cultivated (e.g. dog, horse, tobacco) in Uruguay, and discarded them from the analyses. 

```{r}
#| label: discarded-species
#| eval: true
#| message: false
#| warning: false
#| code-fold: true
#| tbl-cap: 
#|  - 'Tetrapod species that were discarded'
#|  - 'Plant species that were discarded'

dico_traits %>% 
  filter(grepl('non', remarks)) %>%
  distinct(taxon_family_name, taxon_species_name) %>% 
  arrange(taxon_family_name, taxon_species_name) %>% 
  kableExtra::kbl(booktabs = T) %>% 
  kableExtra::kable_styling(latex_options = c('striped', 'hold_position')) %>% 
  kableExtra::scroll_box(height = '300px')

tetra_traits %>% 
  filter(grepl('Casual', remarks)) %>%
  distinct(taxon_class_name, taxon_species_name) %>% 
  arrange(taxon_class_name, taxon_species_name) %>% 
  kableExtra::kbl(booktabs = T) %>% 
  kableExtra::kable_styling(latex_options = c('striped', 'hold_position')) %>% 
  kableExtra::scroll_box(height = '300px')
```

## Final datasets

Finally we combine the observations, with the users' categorisation and the species traits, and create two tables (for tetrapods and plants), with observations as rows.

```{r}
#| label: combine-users-observations
#| eval: true
#| message: false
#| warning: false

observations_uy <- left_join(observations_uy, 
                             users_dataset %>% 
                               select(user_login, 
                                      observations, 
                                      user_category, 
                                      ranking)) %>% 
  filter(!is.na(user_category))

# write_csv(observations_uy, 'data/observations_uy.csv')

```

And then, we classify the quantitative traits using qualitative values.

- **Tetrapods**

```{r}
#| label: tetrapods-data
#| eval: true
#| message: false
#| warning: false

# tetrapods
tetra_data <- left_join(observations_uy, 
                        tetra_traits %>% 
                          filter(!grepl('Casual', remarks))) %>% 
  filter(!is.na(Distribution))

tetra_data <- tetra_data %>% 
  mutate(distribution = case_when(Distribution <= 5 ~ 'narrow',
                                  Distribution > 5 & Distribution <= 16 ~ 'medium',
                                  Distribution > 16 ~ 'wide', 
                                  is.na(Distribution) ~ 'not assessed')) %>%
  mutate(size = case_when(taxon_class_name == 'Mammalia' & 
                            Size < 50 ~ 'small',
                          taxon_class_name == 'Mammalia' & 
                            Size >= 50 & Size < 200 ~ 'medium',
                          taxon_class_name == 'Mammalia' & 
                            Size >= 200 ~ 'large',
                          taxon_class_name == 'Amphibia' & 
                            Size < 5 ~ 'small',
                          taxon_class_name == 'Amphibia' & 
                            Size >= 5 & Size < 10 ~ 'medium',
                          taxon_class_name == 'Amphibia' & 
                            Size >= 10 ~ 'large',
                          taxon_class_name == 'Reptilia' & 
                            Size < 50 ~ 'small',
                          taxon_class_name == 'Reptilia' & 
                            Size >= 50 & Size < 100 ~ 'medium',
                          taxon_class_name == 'Reptilia' & 
                            Size >= 100 ~ 'large',
                          taxon_class_name == 'Aves' & 
                            Size < 20 ~ 'small',
                          taxon_class_name == 'Aves' & 
                            Size >= 20 & Size < 50 ~ 'medium',
                          taxon_class_name == 'Aves' & 
                            Size >= 50 ~ 'large'))

# write_csv(tetra_data, "data/tetra_data.csv")
```

- **Plants**

```{r}
#| label: plants-data
#| eval: true
#| message: false
#| warning: false

plants_data <- left_join(observations_uy,
                        dico_traits %>% 
                         filter(!grepl('native', remarks))) %>%
  filter(!is.na(Distribution))

plants_data <- plants_data %>% 
  mutate(distribution = case_when(Distribution <= 5 ~ 'narrow',
                                  Distribution > 5 & Distribution <= 16 ~ 'medium',
                                  Distribution > 16 ~ 'wide', 
                                  is.na(Distribution) ~ 'not assessed')) %>% 
  rename(growth_form = Habito1)


# write_csv(dico_data, "data/dico_data.csv")
```


## Statistical analyses

First we transform the data, ordering the qualitative variables and scaling the quantitative variables.  

Then, we filter out users with less than 10 records. 

```{r}
#| label: transform-data
#| eval: true
#| message: false
#| warning: false

tetrapods <- tetra_data %>% 
  group_by(user_login) %>% 
  mutate(n_observations = n()) %>% ungroup() %>% 
  filter(n_observations>=3) %>% 
  mutate(status = factor(IUCNglobal, 
                         levels = c('CR','EN','VU', 
                                    'NT', 'DD', 'NE', 
                                    'LC'))) %>% 
  select(ranking, dist=Distribution, size=Size, 
         status, taxon=taxon_class_name,
         state=place_state_name,
         user_category, user_login, taxon_species_name) %>% 
  mutate(size_scaled = scale(size, center = TRUE)[,1], 
         dist_scaled = scale(dist, center = TRUE)[,1],
         log_dist = log(dist))

plants <- plants_data %>% 
  group_by(user_login) %>% 
  mutate(n_observations = n()) %>% ungroup() %>% 
  filter(n_observations>=3) %>% 
  mutate(status = factor(IUCNglobal,
                         levels = c('CR','EN','VU', 
                                    'NT', 'DD', 'NE', 
                                    'LC')),
         growth = factor(growth_form, 
                         levels = c('herb', 'vine', 
                                    'liana', 'subshrub',
                                    'shrub', 'tree'))) %>% 
  select(ranking, dist=Distribution, growth, 
         status, taxon=taxon_family_name,
         state=place_state_name,
         user_category, user_login, taxon_species_name) %>% 
  mutate(dist_scaled = scale(dist, center = TRUE)[,1],
         log_dist = log(dist))
```

Summary of the data

```{r}
#| label: summary-final-dataset
#| eval: true
#| message: false
#| warning: false

# bind_rows(tetrapods,plants) %>% nrow() # number of records
# bind_rows(tetrapods,plants) %>% distinct(taxon_species_name) %>% count  # number of species
# bind_rows(tetrapods,plants) %>% group_by(user_category) %>% count()
# bind_rows(tetrapods,plants) %>% distinct(user_login, .keep_all = T) %>% group_by(user_category) %>% count()

tibble(Group = c('tetrapods', 'plants'),
       Users = c(nrow(tetrapods %>%
                          distinct(user_login)),
                   nrow(plants %>%
                        distinct(user_login))),
       Observations = c(nrow(tetrapods), nrow(plants)),
       Species = c(nrow(tetrapods %>%
                          distinct(taxon_species_name)),
                   nrow(plants %>%
                        distinct(taxon_species_name)))) %>%
  janitor::adorn_totals() %>% 
  kableExtra::kbl(format.args = list(decimal.mark = '.', 
                                     big.mark = ","),
                  digits=2,
                  booktabs = T) %>% 
  kableExtra::kable_styling(latex_options = c('striped', 'hold_position'))
```

- Plots

```{r}
#| label: plot-transformed-data
#| eval: true
#| message: false
#| warning: false

##### TETRAPODS

# size plot
ggplot(data = tetrapods, aes(x = size, fill=taxon)) +
  geom_histogram(position = 'identity', 
                 bins = 15, show.legend = F) +
  facet_grid(~taxon, scales = 'free') +
  scale_fill_brewer(palette = 'Reds', direction = -1) +
  ggpubr::theme_cleveland() +
  labs(x= 'size', y='number of records')

# distribution plot
ggplot(data = tetrapods, aes(x = dist)) +
  geom_histogram(bins=20, fill='red') + 
  ggpubr::theme_cleveland() +
  labs(x= 'distribution', y='number of records')

# conservation status plot
ggplot(data = tetrapods, aes(x = status, fill=taxon)) +
  geom_histogram(stat = 'count', show.legend = F) +
  facet_grid(~taxon, scales = 'free') +
  scale_fill_brewer(palette = 'Reds', direction = -1) +
  ggpubr::theme_cleveland() +
  labs(x= 'conservation status', y='number of records')


##### PLANTS
# growth plot
ggplot(data = plants, aes(x = growth, fill=taxon)) +
  geom_histogram(stat = 'count', show.legend = F) +
  facet_grid(~taxon, scales = 'free') +
  scale_fill_brewer(palette = 'Greens', direction = -1) +
  ggpubr::theme_cleveland() +
  labs(x= 'growth form', y='number of records')

# distribution plot
ggplot(data = plants, aes(x = dist)) +
  geom_histogram(bins=20, fill='green') + 
  ggpubr::theme_cleveland() +
  labs(x= 'distribution', y='number of records')

# conservation status plot
ggplot(data = plants, aes(x = status, fill=taxon)) +
  geom_histogram(stat = 'count', show.legend = F) +
  facet_grid(~taxon, scales = 'free') +
  scale_fill_brewer(palette = 'Greens', direction = -1) +
  ggpubr::theme_cleveland() +
  labs(x= 'conservation status', y='number of records')
```
